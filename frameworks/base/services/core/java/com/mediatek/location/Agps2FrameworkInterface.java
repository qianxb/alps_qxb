// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.ProtocolHandler;
import com.mediatek.socket.base.SocketUtils.UdpServerInterface;
import com.mediatek.socket.base.UdpClient;

/**
 * The interface from AGPS  to Framework <br>
 */
public class Agps2FrameworkInterface {
    public final static int PROTOCOL_TYPE = 301;
    public final static int MAX_BUFF_SIZE = 271;
    public final static int IS_EXIST = 0;
    public final static int ACQUIRE_WAKE_LOCK = 1;
    public final static int RELEASE_WAKE_LOCK = 2;
    public final static int REQUEST_DEDICATED_APN_AND_DNS_QUERY = 3;
    public final static int RELEASE_DEDICATED_APN = 4;
    /**
     * when emergency call is dialed and location is requested from network <br>
     * AGPSD will decide to send this message to framework to show <br>
     * the GPS icon to meet the operator requirement <br>
     */
    public final static int REQUEST_GPS_ICON = 5;
    /**
     * if requestGpsIcon() was sent before, in the end of this AGPS session <br>
     * AGPSD will send this message to framework to remove the GPS icon <br>
     */
    public final static int REMOVE_GPS_ICON = 6;

    public static class Agps2FrameworkInterfaceSender {
        public boolean isExist(UdpClient client) {
            if(!client.connect()) {
                return false;
            }
            BaseBuffer buff = client.getBuff();
            buff.putInt(PROTOCOL_TYPE);
            buff.putInt(IS_EXIST);
            boolean _ret = client.write();
            client.close();
            return _ret;
        }

        public boolean acquireWakeLock(UdpClient client) {
            if(!client.connect()) {
                return false;
            }
            BaseBuffer buff = client.getBuff();
            buff.putInt(PROTOCOL_TYPE);
            buff.putInt(ACQUIRE_WAKE_LOCK);
            boolean _ret = client.write();
            client.close();
            return _ret;
        }

        public boolean releaseWakeLock(UdpClient client) {
            if(!client.connect()) {
                return false;
            }
            BaseBuffer buff = client.getBuff();
            buff.putInt(PROTOCOL_TYPE);
            buff.putInt(RELEASE_WAKE_LOCK);
            boolean _ret = client.write();
            client.close();
            return _ret;
        }

        public boolean requestDedicatedApnAndDnsQuery(UdpClient client, String fqdn,
                boolean isEmergencySupl, boolean isApnEnabled) {
            if(!client.connect()) {
                return false;
            }
            BaseBuffer buff = client.getBuff();
            buff.putInt(PROTOCOL_TYPE);
            buff.putInt(REQUEST_DEDICATED_APN_AND_DNS_QUERY);
            SocketUtils.assertSize(fqdn, 256, 0);
            buff.putString(fqdn);
            buff.putBool(isEmergencySupl);
            buff.putBool(isApnEnabled);
            boolean _ret = client.write();
            client.close();
            return _ret;
        }

        public boolean releaseDedicatedApn(UdpClient client) {
            if(!client.connect()) {
                return false;
            }
            BaseBuffer buff = client.getBuff();
            buff.putInt(PROTOCOL_TYPE);
            buff.putInt(RELEASE_DEDICATED_APN);
            boolean _ret = client.write();
            client.close();
            return _ret;
        }

        /**
          * when emergency call is dialed and location is requested from network <br>
          * AGPSD will decide to send this message to framework to show <br>
          * the GPS icon to meet the operator requirement <br>
          */
        public boolean requestGpsIcon(UdpClient client) {
            if(!client.connect()) {
                return false;
            }
            BaseBuffer buff = client.getBuff();
            buff.putInt(PROTOCOL_TYPE);
            buff.putInt(REQUEST_GPS_ICON);
            boolean _ret = client.write();
            client.close();
            return _ret;
        }

        /**
          * if requestGpsIcon() was sent before, in the end of this AGPS session <br>
          * AGPSD will send this message to framework to remove the GPS icon <br>
          */
        public boolean removeGpsIcon(UdpClient client) {
            if(!client.connect()) {
                return false;
            }
            BaseBuffer buff = client.getBuff();
            buff.putInt(PROTOCOL_TYPE);
            buff.putInt(REMOVE_GPS_ICON);
            boolean _ret = client.write();
            client.close();
            return _ret;
        }

    }

    public static abstract class Agps2FrameworkInterfaceReceiver implements ProtocolHandler {

        public abstract void isExist();

        public abstract void acquireWakeLock();

        public abstract void releaseWakeLock();

        public abstract void requestDedicatedApnAndDnsQuery(String fqdn, boolean isEmergencySupl,
                boolean isApnEnabled);

        public abstract void releaseDedicatedApn();

        /**
          * when emergency call is dialed and location is requested from network <br>
          * AGPSD will decide to send this message to framework to show <br>
          * the GPS icon to meet the operator requirement <br>
          */
        public abstract void requestGpsIcon();

        /**
          * if requestGpsIcon() was sent before, in the end of this AGPS session <br>
          * AGPSD will send this message to framework to remove the GPS icon <br>
          */
        public abstract void removeGpsIcon();


        public boolean readAndDecode(UdpServerInterface server) {
            if (!server.read()) {
                return false;
            }
            return decode(server);
        }

        @Override
        public int getProtocolType() {
            return PROTOCOL_TYPE;
        }

        @Override
        public boolean decode(UdpServerInterface server) {
            boolean _ret = true;
            BaseBuffer buff = server.getBuff();
            buff.setOffset(4); // skip protocol type
            int _type = buff.getInt();
            switch (_type) {
            case IS_EXIST: {
                isExist();
                break;
            }
            case ACQUIRE_WAKE_LOCK: {
                acquireWakeLock();
                break;
            }
            case RELEASE_WAKE_LOCK: {
                releaseWakeLock();
                break;
            }
            case REQUEST_DEDICATED_APN_AND_DNS_QUERY: {
                String fqdn = (String) buff.getString();
                boolean isEmergencySupl = (boolean) buff.getBool();
                boolean isApnEnabled = (boolean) buff.getBool();
                requestDedicatedApnAndDnsQuery(fqdn, isEmergencySupl, isApnEnabled);
                break;
            }
            case RELEASE_DEDICATED_APN: {
                releaseDedicatedApn();
                break;
            }
            case REQUEST_GPS_ICON: {
                requestGpsIcon();
                break;
            }
            case REMOVE_GPS_ICON: {
                removeGpsIcon();
                break;
            }
            default: {
                _ret = false;
                break;
            }
            }
            return _ret;
        }
    }

}
